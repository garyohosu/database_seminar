新入社員向けデータベース講座 - PowerPointスライド構成
======================================================

スライド1: タイトルスライド
--------------------------
【タイトル】
新入社員向けデータベース講座
～ACCESS で学ぶデータベースの基礎～

【サブタイトル】
理論からハンズオンまで、2時間で身につく実践知識

【日付・時間】
2025年 | 120分講座

【講師情報】
[講師名を記入]

スライド2: 本日のアジェンダ
--------------------------
【タイトル】本日の学習内容（120分）

1. データベースとは何か？（15分）
2. リレーショナルデータベースの基本（20分）
3. 正規化の理論と実践（25分）
4. 休憩（10分）
5. データベースの種類（10分）
6. SQL実習とハンズオン（35分）
7. C++Builder連携デモ（10分）
8. まとめ・質疑応答（15分）

スライド3: セクション1 - データベースとは
----------------------------------------
【大見出し】
第1部：データベースの基礎概念

【内容】
データベース（Database）とは？
「データの基地」= 情報が整理された収納箱

スライド4: データベースの定義
----------------------------
【タイトル】データベースとは何か

【ポイント】
• 構造化されたデータを保存する仕組み
• 一定のルールに基づいて整理
• 必要な時に素早くデータを取り出せる
• 大量のデータを効率的に管理

【比喩】
図書館のように、本（データ）が分類されて整理されている状態

スライド5: データベースの利点
----------------------------
【タイトル】なぜデータベースが必要？

【利点】
✓ 高速検索：必要な情報を瞬時に検索
✓ データ整合性：重複や矛盾を防ぐ
✓ 共有アクセス：複数人で同時利用
✓ セキュリティ：アクセス権限の管理
✓ バックアップ：データ保護

スライド6: 身近な活用例
----------------------
【タイトル】データベースは身の回りにある

【事例】
🏢 顧客管理システム
   → 住所、氏名、購入履歴

📦 在庫管理システム
   → 商品情報、在庫数、店舗別管理

🏥 電子カルテ
   → 患者情報、診療記録、処方箋

👥 社員管理システム
   → 社員情報、部署、勤怠管理

スライド7: セクション2 - リレーショナルデータベース
------------------------------------------------
【大見出し】
第2部：リレーショナルデータベース（RDB）

【内容】
表形式でデータを管理する最も一般的なデータベース

スライド8: RDBの基本構造
-----------------------
【タイトル】リレーショナルデータベースの特徴

【構成要素】
• テーブル（表）：データを格納する表
• レコード（行）：1つの情報セット
• フィールド（列）：特定の属性

【イメージ】
Excelの表のような2次元構造
→ 人間にとって理解しやすい

スライド9: 主キーと外部キー
--------------------------
【タイトル】テーブル間の関係を作る「キー」

【主キー（Primary Key）】
• テーブル内でレコードを一意に識別
• 重複不可、NULL不可
• 例：社員ID、商品コード

【外部キー（Foreign Key）】
• 他のテーブルの主キーを参照
• テーブル間の関連を表現
• データの整合性を保証

スライド10: テーブル設計の実例
-----------------------------
【タイトル】社員管理システムの例

【社員テーブル】
┌--------┬--------┬--------┐
│社員ID  │氏名    │部署ID  │
├--------┼--------┼--------┤
│001     │田中    │D01     │
│002     │佐藤    │D02     │
└--------┴--------┴--------┘

【部署テーブル】
┌--------┬--------┐
│部署ID  │部署名  │
├--------┼--------┤
│D01     │営業部  │
│D02     │開発部  │
└--------┴--------┘

スライド11: セクション3 - 正規化
-------------------------------
【大見出し】
第3部：データベースの正規化

【内容】
データの重複を排除し、効率的な設計を実現

スライド12: 正規化とは
--------------------
【タイトル】なぜ正規化が必要？

【目的】
• データの重複を最小化
• ストレージ容量の節約
• データ更新時の整合性確保
• 保守性の向上

【段階】
第1正規形 → 第2正規形 → 第3正規形

スライド13: 非正規化の問題
-------------------------
【タイトル】正規化前のテーブル（問題例）

【注文テーブル（非正規化）】
┌------┬------┬----------┬------┬----┬----┐
│注文ID│顧客名│顧客住所  │商品名│単価│数量│
├------┼------┼----------┼------┼----┼----┤
│001   │田中  │東京都... │ペン  │100 │5   │
│002   │田中  │東京都... │ノート│200 │3   │
└------┴------┴----------┴------┴----┴----┘

【問題点】
❌ 顧客情報の重複
❌ 住所変更時の更新漏れリスク
❌ 容量の無駄

スライド14: 第1正規形
--------------------
【タイトル】第1正規形（1NF）

【ルール】
各セルに1つの値のみを格納

【Before】
┌------┬----------┐
│社員ID│スキル     │
├------┼----------┤
│001   │Java,C++  │
└------┴----------┘

【After】
┌------┬----------┐
│社員ID│スキル     │
├------┼----------┤
│001   │Java      │
│001   │C++       │
└------┴----------┘

スライド15: 第2正規形
--------------------
【タイトル】第2正規形（2NF）

【ルール】
• 第1正規形を満たす
• 部分関数従属を排除

【概念】
主キーに完全に依存する形にデータを分割

【効果】
無駄な重複データを別テーブルに分離

スライド16: 第3正規形
--------------------
【タイトル】第3正規形（3NF）

【ルール】
• 第2正規形を満たす
• 推移的関数従属を排除

【概念】
非キー項目同士の依存関係を解消

【実務】
第3正規形まで適用すれば、ほぼ完璧な設計

スライド17: 正規化の完成例
-------------------------
【タイトル】正規化完了後の設計

【顧客テーブル】
┌------┬------┬----------┐
│顧客ID│顧客名│住所      │
├------┼------┼----------┤
│C01   │田中  │東京都... │
└------┴------┴----------┘

【商品テーブル】
┌------┬------┬----┐
│商品ID│商品名│単価│
├------┼------┼----┤
│P01   │ペン  │100 │
│P02   │ノート│200 │
└------┴------┴----┘

【注文テーブル】
┌------┬------┬------┬----┐
│注文ID│顧客ID│商品ID│数量│
├------┼------┼------┼----┤
│001   │C01   │P01   │5   │
│002   │C01   │P02   │3   │
└------┴------┴------┴----┘

スライド18: 休憩
---------------
【タイトル】
休憩時間

【内容】
☕ 10分間の休憩
質問があればお気軽にどうぞ

スライド19: セクション4 - データベースの種類
-------------------------------------------
【大見出し】
第4部：データベースの種類と選択

【内容】
用途に応じた最適なデータベース選択

スライド20: 主要なRDBMS
----------------------
【タイトル】リレーショナルデータベース管理システム

【オープンソース】
🐬 MySQL：Web開発で人気
🐘 PostgreSQL：高機能、エンタープライズ

【商用製品】
🔷 Microsoft SQL Server：Windows環境
🔶 Oracle Database：大企業向け
📊 Microsoft ACCESS：小規模・デスクトップ

スライド21: NoSQLデータベース
----------------------------
【タイトル】従来のSQL以外のデータベース

【種類】
📄 ドキュメント型：MongoDB
🗂️ キー・バリュー型：Redis
📊 カラム型：Cassandra
🕸️ グラフ型：Neo4j

【用途】
ビッグデータ、リアルタイム処理、柔軟なスキーマ

スライド22: データベース選択基準
------------------------------
【タイトル】用途別データベース選択

【小規模・個人用】
→ ACCESS、SQLite

【Web開発】
→ MySQL、PostgreSQL

【企業システム】
→ SQL Server、Oracle

【ビッグデータ】
→ NoSQL系（MongoDB等）

スライド23: セクション5 - SQL実習
--------------------------------
【大見出し】
第5部：SQL実習とハンズオン

【内容】
実際にACCESSでSQLを書いて実行してみよう！

スライド24: 実習用データベース
-----------------------------
【タイトル】今日使うサンプルデータベース

【商品管理システム】
• 商品テーブル
• 顧客テーブル
• 注文テーブル

【データ例】
商品：ボールペン、ノート、消しゴム
顧客：田中さん、佐藤さん、山田さん

スライド25: SELECT文の基礎
--------------------------
【タイトル】データを取得する - SELECT文

【基本構文】
SELECT フィールド名 FROM テーブル名;

【例1】全データ取得
SELECT * FROM 商品;

【例2】特定フィールド
SELECT 商品名, 価格 FROM 商品;

【例3】条件付き検索
SELECT * FROM 商品 WHERE 価格 > 500;

スライド26: INSERT文
-------------------
【タイトル】データを追加する - INSERT文

【構文】
INSERT INTO テーブル名 (フィールド1, フィールド2) 
VALUES (値1, 値2);

【例】
INSERT INTO 商品 (商品名, 価格, 在庫数) 
VALUES ('シャープペン', 300, 50);

【実習】
新しい商品を5つ追加してみましょう！

スライド27: UPDATE文
-------------------
【タイトル】データを更新する - UPDATE文

【構文】
UPDATE テーブル名 
SET フィールド名 = 新しい値 
WHERE 条件;

【例】
UPDATE 商品 
SET 価格 = 350 
WHERE 商品名 = 'シャープペン';

【注意】
WHERE句を忘れると全データが更新される！

スライド28: DELETE文
-------------------
【タイトル】データを削除する - DELETE文

【構文】
DELETE FROM テーブル名 
WHERE 条件;

【例】
DELETE FROM 商品 
WHERE 在庫数 = 0;

【重要】
WHERE句なしは全削除！十分注意して実行

スライド29: JOIN文
-----------------
【タイトル】複数テーブルを結合 - JOIN文

【構文】
SELECT * FROM テーブル1 
INNER JOIN テーブル2 
ON テーブル1.キー = テーブル2.キー;

【例】
SELECT 顧客.顧客名, 注文.商品ID 
FROM 顧客 
INNER JOIN 注文 ON 顧客.顧客ID = 注文.顧客ID;

スライド30: 実習タイム
--------------------
【タイトル】ハンズオン実習（20分）

【課題1】商品テーブルに5つの新商品を追加
【課題2】価格が500円以上の商品を検索
【課題3】特定商品の在庫数を更新
【課題4】売り切れ商品を削除
【課題5】顧客と注文を結合して表示

【サポート】
困ったら手を挙げて質問してください！

スライド31: セクション6 - C++Builder連携
--------------------------------------
【大見出し】
第6部：C++Builder12からACCESS連携

【内容】
プログラムからデータベースを操作する方法

スライド32: ADO接続の設定
------------------------
【タイトル】データベースへの接続

【接続文字列】
String connectionString = 
  "Provider=Microsoft.ACE.OLEDB.12.0;"
  "Data Source=C:\\database\\sample.accdb;";

【接続処理】
ADOConnection1->ConnectionString = connectionString;
ADOConnection1->Connected = true;

スライド33: データ読み取り例
---------------------------
【タイトル】C++Builderでデータを取得

【コード例】
// SQL実行
ADOQuery1->SQL->Clear();
ADOQuery1->SQL->Add("SELECT * FROM 商品 WHERE 価格 > 1000");
ADOQuery1->Open();

// 結果処理
while (!ADOQuery1->Eof) {
    String 商品名 = ADOQuery1->FieldByName("商品名")->AsString;
    int 価格 = ADOQuery1->FieldByName("価格")->AsInteger;
    ADOQuery1->Next();
}

スライド34: データ書き込み例
---------------------------
【タイトル】C++Builderでデータを追加

【パラメータ化クエリ】
ADOQuery1->SQL->Clear();
ADOQuery1->SQL->Add(
  "INSERT INTO 商品 (商品名, 価格, 在庫数) "
  "VALUES (:name, :price, :stock)"
);
ADOQuery1->Parameters->ParamByName("name")->Value = "新商品";
ADOQuery1->Parameters->ParamByName("price")->Value = 500;
ADOQuery1->Parameters->ParamByName("stock")->Value = 50;
ADOQuery1->ExecSQL();

スライド35: エラーハンドリング
----------------------------
【タイトル】安全なデータベース操作

【try-catch文の使用】
try {
    ADOConnection1->Connected = true;
    // データベース操作
    ADOQuery1->ExecSQL();
} 
catch (Exception &e) {
    ShowMessage("エラー: " + e.Message);
}

【重要ポイント】
必ずエラー処理を実装する

スライド36: まとめ
----------------
【タイトル】本日学んだこと

【理論編】
✓ データベースの基本概念
✓ リレーショナルデータベース
✓ 正規化（第1～第3正規形）
✓ データベースの種類と選択

【実践編】
✓ 基本SQL（SELECT, INSERT, UPDATE, DELETE）
✓ JOIN文での複数テーブル操作
✓ C++Builderからの接続と操作

スライド37: 今後の学習ステップ
-----------------------------
【タイトル】さらなるスキルアップのために

【次のステップ】
1. より複雑なSQL文の習得
2. データベース設計の実践
3. パフォーマンス最適化
4. セキュリティ対策
5. 他のデータベースシステムへの展開

【推奨資料】
• SQL実践ガイド
• データベース設計パターン集
• C++Builder公式ドキュメント

スライド38: 質疑応答
-------------------
【タイトル】
質疑応答タイム

【内容】
💬 ご質問をお聞かせください

• 今日の内容に関する質問
• 実務での疑問
• 今後の学習について

【時間】
10分間

スライド39: お疲れさまでした
---------------------------
【タイトル】
講座終了

【内容】
お疲れさまでした！
データベースの世界への第一歩を踏み出しましたね

【今後も】
✨ 継続的な学習で成長していきましょう
💪 実際のプロジェクトで経験を積んでください
🤝 困ったときはいつでも相談してください

【連絡先】
[講師の連絡先情報]